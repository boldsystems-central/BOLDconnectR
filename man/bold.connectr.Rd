% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bold.connectr.R
\name{bold.connectr}
\alias{bold.connectr}
\title{Retrieve all data from the BOLD database}
\usage{
bold.connectr(
  input.data,
  param,
  param.index,
  api_key,
  taxonomy = NULL,
  geography = NULL,
  latitude = NULL,
  longitude = NULL,
  shapefile = NULL,
  institutes = NULL,
  identified.by = NULL,
  seq.source = NULL,
  marker = NULL,
  collection.period = NULL,
  basecount = NULL,
  altitude = NULL,
  depth = NULL,
  fields = NULL,
  export = FALSE,
  file.type = NULL,
  file.path = NULL,
  file.name = NULL
)
}
\arguments{
\item{input.data}{A file path pointing to either a csv/tsv/txt file with the ids or a data frame where ids are stored.}

\item{param}{A data path, character vector or a \code{data.frame}having any one/all of  “processid”, “sampleid”, "bin_uri" or "dataset_codes".}

\item{param.index}{A number indicating the column index (position) of the \code{params} in the dataset.}

\item{api_key}{A character string required for authentication and data access.}

\item{taxonomy}{A single or multiple character vector of taxonomic names at any hierarchical level. Default value is NULL.}

\item{geography}{A single or multiple character vector of any of country/province/state/region/sector/site names/codes. Default value is NULL.}

\item{latitude}{A single or a vector of two numbers specifying the latitudinal range in decimal degrees. Values should be separated by a comma. Default value is NULL.}

\item{longitude}{A single or a vector of two numbers specifying the longitudinal range in decimal degrees. Values should be separated by a comma. Default value is NULL.}

\item{shapefile}{A file path pointing to a shapefile or name of the shapefile (.shp) imported in the R session. Default value is NULL.}

\item{institutes}{A single or multiple character vector specifying names of institutes. Default value is NULL.}

\item{identified.by}{A single or multiple character vector specifying names of people responsible for identifying the organism. Default value is NULL.}

\item{seq.source}{A single or multiple character vector specifying the data portals from where the (sequence) data was mined. Default value is NULL.}

\item{marker}{A single or multiple character vector specifying  of gene names. Default value is NULL.}

\item{collection.period}{A single or a vector of two date values specifying the collection period range (start, end). Values should be separated by a comma. Default value is NULL.}

\item{basecount}{A single or a vector of two numbers specifying range of basepairs number. Values should be separated by a comma. Default value is NULL.}

\item{altitude}{A single or a vector of two numbers specifying the altitude range in meters. Values should be separated by a comma. Default value is NULL.}

\item{depth}{A single or a vector of two numbers specifying the depth range. Values should be separated by a comma. Default value is NULL.}

\item{fields}{A single or multiple character vector specifying columns needed in the final dataframe. Default value is NULL.}

\item{export}{A logical value specifying whether the output should be exported locally. Default value is FALSE.}

\item{file.type}{A character value specifying the type of file to be exported. Currently ‘.csv’ and ‘.tsv’ options are available.}

\item{file.path}{A character value specifying the folder path where the file should be saved.}

\item{file.name}{A character value specifying the name of the exported file.}
}
\value{
A data frame containing all the information related to the processids/sampleids and the filters applied (if/any)
}
\description{
Retrieves public and private user data based on different ids (processid,sampleid, dataset codes & bin_uri) input.
}
\details{
This function retrieves both public as well as private user data, where private data refers to data that the user has permission to access. It supports effective download data in bulk using search parameters (param) such as ‘processids’, ‘sampleids’, ‘bin_uri’ and ‘dataset codes’. Users must specify only one of the params at a time for retrieval -- multi-parameter searches combining fields like ‘processids’+ ‘sampleids’ + ‘bin_uri’ are not supported, regardless  of  the parameters available. There is no upper limit to the volume of data that can be retrieved, however, this depends on the user’s internet connection and computer specifications.
Data input can be either through a path to a flat file with extensions like \code{.csv/.tsv/.txt} or a R data.frame object. The import process assumes that the input data includes a header. Post download, users can apply optional filters on various fields like taxonomy, geography, institutions etc. with the default setting for all fields being  NULL. Using the fields argument allows users to select specific columns for inclusion in the final data frame, though, processids and sampleids, are included by default.
If the “fields’ argument is left as NULL all columns will be downloaded. api_key is a UUID v4 hexadecimal string, is obtained upon request from  BOLD to \code{support@boldsystems.org} and is valid for one year, requiring renewal thereafter. The names of the columns in the downloaded data are those specified in the the \code{bold.fields.info}. It is important to correctly match the \code{param} and \code{param.index} to avoid getting any errors. Note that some values or fields might currently be unavailable but may be accessible future.
}
\examples{
\dontrun{
data(test.data)

#'key' would the 'api_key' provided to the user
#With processids ('processid' param is the first column in the data (param.index=1))
res<-bold.connectr(input.data = test.data, param = 'processid',param.index = 1,api_key = "key")


#With sampleids ('sampleid' param is the second column in the data (param.index=2))
res<-bold.connectr(test.data,'sampleid',2,api_key = "key")


## Using filters

#Geography
res<-bold.connectr(test.data, param = 'processid',param.index = 1,api_key = "key",geography="India")

#Sequence length
res<-bold.connectr(test.data, 'processid',1,api_key = "key",nuc_basecount=c(500,600))

#Gene marker & sequence length
res<-bold.connectr(test.data,'processid',1,api_key = "key",marker="COI-5P",nuc_basecount=c(500,600))

}

}
