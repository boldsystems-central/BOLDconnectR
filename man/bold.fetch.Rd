% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bold.fetch.R
\name{bold.fetch}
\alias{bold.fetch}
\title{Retrieve all data from the BOLD database}
\usage{
bold.fetch(
  param.data,
  query.param,
  param.index,
  api_key,
  filt.taxonomy = NULL,
  filt.geography = NULL,
  filt.latitude = NULL,
  filt.longitude = NULL,
  filt.shapefile = NULL,
  filt.institutes = NULL,
  filt.identified.by = NULL,
  filt.seq.source = NULL,
  filt.marker = NULL,
  filt.collection.period = NULL,
  filt.basecount = NULL,
  filt.altitude = NULL,
  filt.depth = NULL,
  filt.fields = NULL,
  export = FALSE,
  file.type = NULL,
  file.path = NULL,
  file.name = NULL
)
}
\arguments{
\item{param.data}{A file path pointing to either a csv/tsv/txt file with the ids or a data frame where ids are stored.}

\item{query.param}{The parameter on which the data should be fetched. “processid”, “sampleid”, "bin_uri" or "dataset_codes".}

\item{param.index}{A number indicating the column index (position) of the \code{query.params} in the dataset.}

\item{api_key}{A character string required for authentication and data access.}

\item{filt.taxonomy}{A single or multiple character vector of taxonomic names at any hierarchical level. Default value is NULL.}

\item{filt.geography}{A single or multiple character vector of any of country/province/state/region/sector/site names/codes. Default value is NULL.}

\item{filt.latitude}{A single or a vector of two numbers specifying the latitudinal range in decimal degrees. Values should be separated by a comma. Default value is NULL.}

\item{filt.longitude}{A single or a vector of two numbers specifying the longitudinal range in decimal degrees. Values should be separated by a comma. Default value is NULL.}

\item{filt.shapefile}{A file path pointing to a shapefile or name of the shapefile (.shp) imported in the R session. Default value is NULL.}

\item{filt.institutes}{A single or multiple character vector specifying names of institutes. Default value is NULL.}

\item{filt.identified.by}{A single or multiple character vector specifying names of people responsible for identifying the organism. Default value is NULL.}

\item{filt.seq.source}{A single or multiple character vector specifying the data portals from where the (sequence) data was mined. Default value is NULL.}

\item{filt.marker}{A single or multiple character vector specifying of gene names. Default value is NULL.}

\item{filt.collection.period}{A single or a vector of two date values specifying the collection period range (start, end). Values should be separated by a comma. Default value is NULL.}

\item{filt.basecount}{A single or a vector of two numbers specifying range of basepairs number. Val- ues should be separated by a comma. Default value is NULL.}

\item{filt.altitude}{A single or a vector of two numbers specifying the altitude range in meters. Values should be separated by a comma. Default value is NULL.}

\item{filt.depth}{A single or a vector of two numbers specifying the depth range. Values should be separated by a comma. Default value is NULL.}

\item{filt.fields}{A single or multiple character vector specifying columns needed in the final dataframe. Default value is NULL.}

\item{export}{A logical value specifying whether the output should be exported locally. De- fault value is FALSE.}

\item{file.type}{A character value specifying the type of file to be exported. Currently ‘.csv’ and ‘.tsv’ options are available.}

\item{file.path}{A character value specifying the folder path where the file should be saved.}

\item{file.name}{A character value specifying the name of the exported file.}
}
\value{
A data frame containing all the information related to the processids/sampleids and the filters applied (if/any).
}
\description{
Retrieves public and private user data based on different parameters (processid, sampleid, dataset codes & bin_uri) input.
}
\details{
\code{bold.fetch} retrieves both public as well as private user data, where private data refers to data that the user has permission to access. The data is downloaded in the Barcode Core Data Model (BCDM) format. It supports effective download data in bulk using search parameters \code{query.params} such as ‘processids’, ‘sampleids’, ‘bin_uri’ and ‘dataset codes’. Data input can be either through a path to a flat file with extensions like \code{.csv/.tsv/.txt} or a R \code{data.frame} object. The import process assumes that the input data includes a header. Users must specify only one of the \code{query.params} at a time for retrieval. Multi-parameter searches combining fields like ‘processids’+ ‘sampleids’ + ‘bin_uri’ are not supported, regardless of the parameters available. The \code{filt.} or filter parameter arguments provide further data sorting by which a specific user defined data can be obtained. Note that any/all \code{filt.}argument names must be written explicitly to avoid any errors (Ex. \code{filt.institutes} = ’CBG’ instead of just ’CBG’). Using the \code{filt.fields} argument allows users to select specific columns for inclusion in the final data frame, though, processids and sampleids, are included by default. If this argument is left as NULL all columns will be downloaded. There is no upper limit to the volume of data that can be retrieved, however, this depends on the user’s internet connection and computer specifications. The \code{api_key} is a UUID v4 hexadecimal string obtained upon request from BOLD at support@boldsystems.org and is valid for one year, requiring renewal thereafter. The names of the columns in the downloaded data correspond to those specified in bold.fields.info. It is important to correctly match the \code{query.param} and \code{param.index} to avoid getting any errors. Note that some values or fields might currently be unavailable but may be accessible future.
}
\examples{
\dontrun{
data(test.data)

# key' would the 'api_key' provided to the user

#With processids ('processid' param is the first column in the data (param.index=1))
res <- bold.fetch(param.data = test.data,
query.param = 'processid',
param.index = 1,
api_key = "key")


#With sampleids ('sampleid' param is the second column in the data (param.index=2))
res<-bold.fetch(param.data = test.data,
query.param = 'sampleid',
param.index = 2,
api_key = "key")

## Using filters

#Geography
res <- bold.fetch(param.data = test.data,
query.param = 'processid',
param.index = 1,
api_key = "key",
filt.geography = "Churchill")

#Sequence length
res <- bold.fetch(param.data = test.data,
query.param = 'processid',
param.index = 1,
api_key  =  "key",
filt.basecount = c(500,600))

#Gene marker & sequence length
res<-bold.fetch(param.data = test.data,
query.param = 'processid',
param.index = 1,
api_key  =  "key",
filt.marker = "COI-5P",
filt.basecount = c(500, 600))

}

}
